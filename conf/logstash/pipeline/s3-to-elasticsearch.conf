input {
    s3 {
        access_key_id => "${S3_SCW_ACCESS_KEY_ID}"
        secret_access_key => "${S3_SCW_SECRET_ACCESS_KEY}"
        bucket => "insee-deces" 
        endpoint => "https://s3.nl-ams.scw.cloud"
        region => "nl-ams"
        watch_for_new_files => "false"
    }
}

filter {
    csv {
        separator => ";"
        skip_header => "true"
        columns => ["nomprenom", "sexe", "datenaiss", "lieunaiss", "commnaiss", "paysnaiss", "datedeces", "lieudeces", "actedeces"]
    }

    mutate {
        convert => { "sexe" => "integer" }
        split => { "nomprenom" => "*" }

        add_field => {
            "nom" => "%{[nomprenom][0]}"
            "prenoms" => "%{[nomprenom][1]}"
        }
    }

    mutate {
        gsub => ["prenoms", "/", ""]
    }

    # === BIRTH DATE AND DEATH DATE PARSING ===
    
    # Store day, month, and year in a separate field so that no info is lost.
    # Day, month, or year can be 0 in the data source.
    ruby {
        code => 'event.set("[naiss][date][annee]", event.get("datenaiss")[0..3]);
                 event.set("[naiss][date][mois]", event.get("datenaiss")[4..5]);
                 event.set("[naiss][date][jour]", event.get("datenaiss")[6..7]);
                 event.set("[deces][date][annee]", event.get("datedeces")[0..3]);
                 event.set("[deces][date][mois]", event.get("datedeces")[4..5]);
                 event.set("[deces][date][jour]", event.get("datedeces")[6..7]);'
    }

    # Birth date
    # ==========

    # 1. Try to parse using format yyyyMMdd
    date {
        match => [ "datenaiss", "yyyyMMdd" ]
        timezone => "UTC"
        target => "[naiss][date][complete]"
        tag_on_failure => ["_datenaiss_dateparsefailure_01"]
    }

    # 2. If it fails, try to parse using format yyyyMM
    if "_datenaiss_dateparsefailure_01" in [tags] {
        mutate {
            add_field => { "naiss_annee_mois" => "%{[naiss][date][annee]}%{[naiss][date][mois]}" }
        }

        date {
            match => [ "naiss_annee_mois", "yyyyMM" ]
            timezone => "UTC"
            target => "[naiss][date][complete]"
            tag_on_failure => ["_datenaiss_dateparsefailure_02"]
        }

        # 3. If it fails, try to parse using format yyyy
        if "_datenaiss_dateparsefailure_02" in [tags] { 
            date {
                match => [ "[naiss][date][annee]", "yyyy" ]
                timezone => "UTC"
                target => "[naiss][date][complete]"
                tag_on_failure => ["_datenaiss_dateparsefailure_03"]
            }
        }
    }

    # Death date, same process
    # ========================

    # 1. Try to parse using format yyyyMMdd
    date {
        match => [ "datedeces", "yyyyMMdd" ]
        timezone => "UTC"
        target => "[deces][date][complete]"
        tag_on_failure => ["_datedeces_dateparsefailure_01"]
    }

    # 2. If it fails, try to parse using format yyyyMM
    if "_datedeces_dateparsefailure_01" in [tags] {
        mutate {
            add_field => { "deces_annee_mois" => "%{[deces][date][annee]}%{[deces][date][mois]}" }
        }

        date {
            match => [ "deces_annee_mois", "yyyyMM" ]
            timezone => "UTC"
            target => "[deces][date][complete]"
            tag_on_failure => ["_datedeces_dateparsefailure_02"]
        }

        # 3. If it fails, try to parse using format yyyy
        if "_datedeces_dateparsefailure_02" in [tags] {
            date {
                match => [ "[deces][date][annee]", "yyyy" ]
                timezone => "UTC"
                target => "[deces][date][complete]"
                tag_on_failure => ["_datedeces_dateparsefailure_03"]
            }
        }
    }

    # Rename other fields
    mutate {
        rename => {
            "lieunaiss" => "[naiss][codelieu]"
            "commnaiss" => "[naiss][commune]"
            "paysnaiss" => "[naiss][pays]"
            "lieudeces" => "[deces][codelieu]"
            "actedeces" => "[deces][numacte]"
        }
        remove_field => ["nomprenom", "message", "host", "geoip", "datenaiss", "datedeces", "deces_annee_mois", "naiss_annee_mois"]
    }

    # Set default value for birth country
    if [naiss][pays] == "" {
        mutate {
            replace => ["[naiss][pays]", "FRANCE"]
        }
    }

    # Convert date pieces to integer
    mutate {
        convert => {
            "[naiss][date][annee]" => "integer" 
            "[naiss][date][mois]" => "integer"
            "[naiss][date][jour]" => "integer"
            "[deces][date][annee]" => "integer"
            "[deces][date][mois]" => "integer"
            "[deces][date][jour]" => "integer"
        }
    }
}

output {
    elasticsearch {
        hosts => ["https://es01:9200"]
        cacert => "${CACERT}"
        index => "logstash-insee-deces"
        workers => 1
        user => "${LOGSTASH_USER}"
        password => "${LOGSTASH_PASSWORD}"
    }
}
