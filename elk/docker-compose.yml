version: "3.8"
services:

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION:?err}
    container_name: es01
    environment:
      node.name: es01
      cluster.name: es-docker-cluster
      # discovery.seed_hosts: es02,es03
      cluster.initial_master_nodes: es01 # ,es02,es03
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: "-Xms2048m -Xmx2048m"
      xpack.license.self_generated.type: basic
      xpack.security.enabled: 'true'
      xpack.security.http.ssl.enabled: 'true'
      xpack.security.http.ssl.key: ${CERTS_DIR:?err}/es01/es01.key
      xpack.security.http.ssl.certificate_authorities: ${CERTS_DIR:?err}/ca/ca.crt
      xpack.security.http.ssl.certificate: ${CERTS_DIR:?err}/es01/es01.crt
      xpack.security.transport.ssl.enabled: 'true' 
      xpack.security.transport.ssl.verification_mode: certificate 
      xpack.security.transport.ssl.certificate_authorities: ${CERTS_DIR:?err}/ca/ca.crt
      xpack.security.transport.ssl.certificate: ${CERTS_DIR:?err}/es01/es01.crt
      xpack.security.transport.ssl.key: ${CERTS_DIR:?err}/es01/es01.key
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
      - certs:${CERTS_DIR:?err}
    expose:
      - "9200"
    networks:
      - elastic
    # commented until there is a way to get cluster health without authentication
    # healthcheck:
      # test: ["CMD", "curl", "-f", "-X", "GET", "https://localhost:9200/_cluster_health?wait_for_status=green&timeout=1s"]
      # interval: 5s
      # timeout: 3s
      # retries: 3
      # start_period: 60s
      
  # es02:
    # image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION:?err}
    # container_name: es02
    # environment:
      # node.name: es02
      # cluster.name: es-docker-cluster
      # discovery.seed_hosts: es01,es03
      # cluster.initial_master_nodes: es01,es02,es03
      # bootstrap.memory_lock: 'true'
      # ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      # xpack.license.self_generated.type: basic
      # xpack.security.enabled: 'true'
      # xpack.security.http.ssl.enabled: 'true'
      # xpack.security.http.ssl.key: ${CERTS_DIR:?err}/es02/es02.key
      # xpack.security.http.ssl.certificate_authorities: ${CERTS_DIR:?err}/ca/ca.crt
      # xpack.security.http.ssl.certificate: ${CERTS_DIR:?err}/es02/es02.crt
      # xpack.security.transport.ssl.enabled: 'true' 
      # xpack.security.transport.ssl.verification_mode: certificate 
      # xpack.security.transport.ssl.certificate_authorities: ${CERTS_DIR:?err}/ca/ca.crt
      # xpack.security.transport.ssl.certificate: ${CERTS_DIR:?err}/es02/es02.crt
      # xpack.security.transport.ssl.key: ${CERTS_DIR:?err}/es02/es02.key
    # ulimits:
      # memlock:
        # soft: -1
        # hard: -1
    # volumes:
      # - data02:/usr/share/elasticsearch/data
      # - certs:${CERTS_DIR:?err}
    # networks:
      # - elastic

  # es03:
    # image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION:?err}
    # container_name: es03
    # environment:
      # node.name: es03
      # cluster.name: es-docker-cluster
      # discovery.seed_hosts: es01,es02
      # cluster.initial_master_nodes: es01,es02,es03
      # bootstrap.memory_lock: 'true'
      # ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      # xpack.license.self_generated.type: basic
      # xpack.security.enabled: 'true'
      # xpack.security.http.ssl.enabled: 'true'
      # xpack.security.http.ssl.key: ${CERTS_DIR:?err}/es03/es03.key
      # xpack.security.http.ssl.certificate_authorities: ${CERTS_DIR:?err}/ca/ca.crt
      # xpack.security.http.ssl.certificate: ${CERTS_DIR:?err}/es03/es03.crt
      # xpack.security.transport.ssl.enabled: 'true' 
      # xpack.security.transport.ssl.verification_mode: certificate 
      # xpack.security.transport.ssl.certificate_authorities: ${CERTS_DIR:?err}/ca/ca.crt
      # xpack.security.transport.ssl.certificate: ${CERTS_DIR:?err}/es03/es03.crt
      # xpack.security.transport.ssl.key: ${CERTS_DIR:?err}/es03/es03.key
    # ulimits:
      # memlock:
        # soft: -1
        # hard: -1
    # volumes:
      # - data03:/usr/share/elasticsearch/data
      # - certs:${CERTS_DIR:?err}
    # networks:
      # - elastic

  kib01:
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION:?err}
    container_name: kib01
    depends_on:
      - es01
    expose:
      - "5601"
    environment:
      SERVERNAME: localhost
      ELASTICSEARCH_URL: https://es01:9200
      ELASTICSEARCH_HOSTS: https://es01:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:?err}
      XPACK_SECURITY_ENABLED: 'true'
      XPACK_INGESTMANAGER_FLEET_TLSCHECKDISABLED: 'true'
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: ${KIBANA_ENCRYPTION_KEY:?err}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: ${CERTS_DIR:?err}/ca/ca.crt
      SERVER_SSL_ENABLED: 'true'
      SERVER_SSL_KEY: ${CERTS_DIR:?err}/kib01/kib01.key
      SERVER_SSL_CERTIFICATE: ${CERTS_DIR:?err}/kib01/kib01.crt
    volumes:
      - certs:${CERTS_DIR:?err}
    networks:
      - elastic
    healthcheck:
      test: ["CMD", "curl", "--cacert", "$CERTS_DIR/ca/ca.crt", "-s", "-f", "https://localhost:5601/login"]
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 60s
      
  nginx:
    container_name: nginx01
    image: nginx:alpine
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./conf/nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./conf/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
      - ./data/certbot/www:/var/www/certbot
      - ./data/certbot/conf:/etc/letsencrypt
    networks:
      - elastic
    restart: always
    
  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/www:/var/www/certbot
      - ./data/certbot/conf:/etc/letsencrypt
    networks:
      - elastic
      
volumes:
  data01:
    driver: local
  # data02:
    # driver: local
  # data03:
    # driver: local
  certs:
    driver: local

networks:
  elastic:
    driver: bridge
